
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_PACKAGE_HXX_
#define INCLUDE_mmx_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>

#ifdef MMX_EXPORT_ENABLE
#include <mmx_export.h>
#else
#ifndef MMX_EXPORT
#define MMX_EXPORT
#endif
#endif


namespace mmx {

void register_all_types();


class PlotHeader;

MMX_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PlotHeader; ///< \private

} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::PlotHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::PlotHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::PlotHeader& value); ///< \private

void write(std::ostream& out, const ::mmx::PlotHeader& value); ///< \private

void accept(Visitor& visitor, const ::mmx::PlotHeader& value); ///< \private

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::mmx::PlotHeader> value); ///< \private

/// \private
template<>
struct type<::mmx::PlotHeader> {
	void read(TypeInput& in, ::mmx::PlotHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::PlotHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::PlotHeader& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::PlotHeader& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::PlotHeader& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::PlotHeader& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_PACKAGE_HXX_
